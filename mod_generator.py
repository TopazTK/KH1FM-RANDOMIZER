from gooey import Gooey,GooeyParser
from write_mod import write_mod
import os
import json
import zipfile

def get_nested_zip(zip_file_path):
    """
    Checks if a zip file contains another zip file.

    Args:
        zip_file_path (str): The path to the zip file.

    Returns:
        bool: True if the zip file contains another zip file, False otherwise.
    """
    try:
        with zipfile.ZipFile(zip_file_path, 'r') as zip_file:
            for item in zip_file.namelist():
                if os.path.splitext(item)[1].lower() == '.zip':
                    return item
            return None
    except zipfile.BadZipFile:
        return None

def extract_zip(zip_file_path):
    """Extracts a zip file to a folder with the same name."""

    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
        # Get the name of the zip file without the extension
        folder_name = os.path.splitext(zip_file_path)[0]

        # Create the folder if it doesn't exist
        os.makedirs(folder_name, exist_ok=True)

        # Extract all contents of the zip file to the folder
        zip_ref.extractall(folder_name)

def read_presets():
    with open("./mod_generator_presets.json", 'r') as file:
        data = json.load(file)
        return data

def write_presets(args):
    data = json.dumps(vars(args), indent=4)
    with open("./mod_generator_presets.json", "w") as file:
        file.write(data)

@Gooey(program_name='KH1 Randomizer Mod Generator',
        image_dir='./Images/',
        header_bg_color="#efcf78")

def main():
    presets = read_presets()
    parser = GooeyParser()
    parser.add_argument("ap_zip_file",
        widget = "FileChooser",
        default = presets["ap_zip_file"],
        metavar = "AP Zip File Output",
        help = "The zip file generated by Archipelago or the Seed Generator.")
    parser.add_argument("kh1_data_path",
        widget = "DirChooser",
        default = presets["kh1_data_path"],
        metavar = "KH1 Data Path",
        help = "The path to your KH1 data extracted by OpenKH.")
    
    args = parser.parse_args()
    write_presets(args)
    ap_zip_file = args.ap_zip_file
    nested_zip = get_nested_zip(ap_zip_file)
    if nested_zip:
        print("Not the seed zip, likely the main zip.")
        print("Assuming the seed only contains one player, lets try to find the inner zip.")
        extract_zip(ap_zip_file)
        ap_zip_file = ap_zip_file.replace(".zip","") + "/" + nested_zip
        print("Inner zip calculated as " + ap_zip_file)
    write_mod(ap_zip_file, args.kh1_data_path)

if __name__ == "__main__":
    main()
